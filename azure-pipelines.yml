# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: Default
jobs:
- job: TestBuild
  displayName: 'Test and build Job'
  steps:
  - task: CopyFiles@2
    inputs:
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      OverWrite: true

  - task: CmdLine@2
    displayName: 'Test code quality'
    inputs:
      script: |
        echo Test code quality
        python3 flake8.py
    continueOnError: false # Stop the pipeline if this step fails

  - task: CmdLine@2
    displayName: 'Build Docker images'
    inputs:
      script: |
        echo Build Docker images
        sudo docker build -t flasapp .
      workingDirectory: '$(Build.ArtifactStagingDirectory)'
    continueOnError: false

  - task: CmdLine@2
    displayName: 'Test container'
    inputs:
      script: |
        echo Test container
        sudo docker run --rm -p 8000:8000 flasapp bash -c "python3 app.py & sleep 2 && curl -X POST -d 'name=Renaud' http://localhost:5000/hello"
      workingDirectory: '$(Build.ArtifactStagingDirectory)'
    continueOnError: false

- job: Publish
  displayName: 'Publish Job'
  dependsOn: TestBuild
  variables:
    archiveName: 'app.zip'
  steps:
  - script: 'ls -lR $(Build.ArtifactStagingDirectory)' # Affiche le contenu du r√©pertoire de travail
    displayName: 'List Files'
  - task: CmdLine@2
    displayName: 'Archive Files'
    inputs:
      script: |
        zip -r $(archiveName) ./*
      workingDirectory: '$(Build.ArtifactStagingDirectory)'
            
  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    continueOnError: false

- job: Deploy
  displayName: 'Deploy Job'
  dependsOn: Publish
  steps:
  - task: CmdLine@2
    displayName: 'Run as Appservice'
    inputs:
      script: 'az webapp deploy --name $APP_SERVICE_NAME --resource-group $RESOURCE_GROUP_NAME --src-path $(Build.ArtifactStagingDirectory)/app.zip'

