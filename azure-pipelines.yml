# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: Default
variables:
  APP_SERVICE_NAME: 'soatflaskapp'
  RESOURCE_GROUP_NAME: 'training-rldahou-rg'

steps:
- task: CopyFiles@2
  inputs:
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    OverWrite: true
- task: CmdLine@2
  displayName: 'Test code quality'
  inputs:
    script: |
      echo Test code quality
      python3 flake8.py
  continueOnError: false
- task: CmdLine@2
  displayName: 'Build Docker images'
  inputs:
    script: |
      echo Build Docker images
      sudo docker build -t flasapp .
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
  continueOnError: false
- task: CmdLine@2
  displayName: 'Test container'
  inputs:
    script: |
      echo Test container
      sudo docker run --rm -p 8000:8000 flasapp bash -c "python3 app.py & sleep 2 && curl -X POST -d 'name=Renaud' http://localhost:5000/hello"
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
  continueOnError: false
- task: CmdLine@2
  displayName: 'Achives file'
  inputs:
    script: 'zip -r app.zip ./*'
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/app.zip'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  continueOnError: false

- script: |
    # Décodez la clé privée depuis la variable MyPrivateKey
    echo "$(MyPrivateKey)"| base64 -d > mykey.pem && sudo chmod 600 mykey.pem

    # Copiez l'artifact vers la machine virtuelle
    scp -i mykey.pem $(Build.ArtifactStagingDirectory)/app.zip azureuser@51.132.24.121:/home/azureuser/

    # Connectez-vous à la machine virtuelle et déployez l'artifact
    ssh -i mykey.pem azureuser@51.132.24.121 "cd /home/azureuser && unzip app.zip"
  displayName: 'Copy artifact to VM and deploy'

- task: CmdLine@2
  displayName: 'Run as Appservice'
  inputs:
    script: 'az webapp deploy --name $APP_SERVICE_NAME --resource-group $RESOURCE_GROUP_NAME --src-path $(Build.ArtifactStagingDirectory)/app.zip'